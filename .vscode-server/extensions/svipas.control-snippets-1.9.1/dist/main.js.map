{"version":3,"sources":["../webpack/bootstrap","../external \"vscode\"","../external \"fs\"","../external \"path\"",".././src/main.ts",".././src/extension.ts",".././src/ExtensionStore.ts",".././src/snippets.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","reloadWindow","vscode","commands","executeCommand","showReloadWarning","window","showWarningMessage","modal","title","async","context","store","ExtensionStore","globalState","controlSnippetsCommand","registerCommand","args","cancellationToken","extensions","getAllExtensionsFromVSCode","quickPickItems","all","map","ext","label","description","picked","isSnippetsEnabled","selectedQuickPickValues","showQuickPick","canPickMany","ignoreFocusOut","matchOnDescription","placeHolder","enabledExtensions","length","isAllDisabled","enabled","disableSnippetForExtension","isAllEnabled","shouldPromptReloadModal","find","id","getExtensionIdFromText","push","enableSnippetForExtension","val","openControlSnippets","disabled","disabledExtensions","Promise","saveDisabledExtensions","updateVSCodeVersion","reloadModalResponse","showInformationMessage","isCloseAffordance","reloadWarningResponse","err","showErrorMessage","subscriptions","shouldDisableExtensions","Array","isArray","shouldPromptForReload","findExtensionById","text","includes","slice","indexOf","allExtensions","fileContent","fs","promises","readFile","path","join","extensionPath","packageJSON","JSON","parse","contributes","isBuiltin","publisher","emoji","extensionKind","ExtensionKind","UI","displayName","extension","snippets","snippets_disabled","ExtensionStoreKey","this","_globalState","DISABLED_EXTENSIONS","vscodeVersionFromStorage","VSCODE_VERSION","version","_isNewVSCodeVersion","env","appName","disabledExtensionsId","update","savePackageJSON","writeFile","stringify","Error","undefined"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","import * as vscode from \"vscode\";\nimport {\n\tExtensionData,\n\tgetAllExtensionsFromVSCode,\n\tgetExtensionIdFromText,\n} from \"./extension\";\nimport { ExtensionStore } from \"./ExtensionStore\";\nimport {\n\tdisableSnippetForExtension,\n\tenableSnippetForExtension,\n} from \"./snippets\";\n\nconst EXTENSION_COMMAND = \"extension.control-snippets\";\nconst MODAL_RELOAD = \"Reload Window\";\n\nexport async function activate(context: vscode.ExtensionContext) {\n\tconst store = new ExtensionStore(context.globalState);\n\tconst controlSnippetsCommand = vscode.commands.registerCommand(\n\t\tEXTENSION_COMMAND,\n\t\tasync (args?: [vscode.CancellationToken?]) => {\n\t\t\ttry {\n\t\t\t\tconst shouldPromptForReload = await openControlSnippets(args?.[0]);\n\t\t\t\tif (!shouldPromptForReload) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Save disabled extensions and current VS Code version to global store.\n\t\t\t\tconst {\n\t\t\t\t\tdisabled: disabledExtensions,\n\t\t\t\t} = await getAllExtensionsFromVSCode();\n\t\t\t\tawait Promise.all([\n\t\t\t\t\tstore.saveDisabledExtensions(disabledExtensions),\n\t\t\t\t\tstore.updateVSCodeVersion(),\n\t\t\t\t]);\n\n\t\t\t\tconst reloadModalResponse = await showReloadModal();\n\t\t\t\tif (reloadModalResponse?.title === MODAL_RELOAD) {\n\t\t\t\t\treloadWindow();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst reloadWarningResponse = await showReloadWarning();\n\t\t\t\tif (reloadWarningResponse?.title === MODAL_RELOAD) {\n\t\t\t\t\treloadWindow();\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tvscode.window.showErrorMessage(err);\n\t\t\t}\n\t\t}\n\t);\n\n\tcontext.subscriptions.push(controlSnippetsCommand);\n\n\tif (\n\t\t!store.shouldDisableExtensions ||\n\t\t!Array.isArray(store.disabledExtensions) ||\n\t\tstore.disabledExtensions.length === 0\n\t) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tconst extensions = await getAllExtensionsFromVSCode();\n\t\tlet shouldPromptForReload = false;\n\n\t\t// Disable extensions snippets.\n\t\tfor (const ext of extensions.enabled) {\n\t\t\tif (!store.findExtensionById(ext.id)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tawait disableSnippetForExtension(ext);\n\t\t\tshouldPromptForReload = true;\n\t\t}\n\n\t\tif (shouldPromptForReload) {\n\t\t\tawait store.updateVSCodeVersion();\n\n\t\t\tconst reloadWarningResponse = await showReloadWarning();\n\t\t\tif (reloadWarningResponse?.title === MODAL_RELOAD) {\n\t\t\t\treloadWindow();\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\tvscode.window.showErrorMessage(err);\n\t}\n}\n\n/**\n * @returns true if it should prompt reload modal, false otherwise.\n */\nasync function openControlSnippets(\n\tcancellationToken?: vscode.CancellationToken\n): Promise<boolean> {\n\tconst extensions = await getAllExtensionsFromVSCode();\n\tconst quickPickItems: vscode.QuickPickItem[] = extensions.all.map((ext) => ({\n\t\tlabel: ext.name,\n\t\tdescription: ext.description,\n\t\tpicked: ext.isSnippetsEnabled,\n\t}));\n\n\tconst selectedQuickPickValues = await vscode.window.showQuickPick(\n\t\tquickPickItems,\n\t\t{\n\t\t\tcanPickMany: true,\n\t\t\tignoreFocusOut: true,\n\t\t\tmatchOnDescription: true,\n\t\t\tplaceHolder: \"Select extension whose snippets to disable or enable\",\n\t\t},\n\t\tcancellationToken\n\t);\n\n\t// Canceled by user.\n\tif (!selectedQuickPickValues) {\n\t\treturn false;\n\t}\n\n\tconst enabledExtensions: ExtensionData[] = [];\n\n\t// Nothing was selected, disable all extensions.\n\tif (selectedQuickPickValues.length === 0) {\n\t\t// All extensions snippets are already disabled.\n\t\tif (extensions.isAllDisabled) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const ext of extensions.enabled) {\n\t\t\tawait disableSnippetForExtension(ext);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// All extensions snippets are already enabled.\n\tif (\n\t\tselectedQuickPickValues.length === extensions.all.length &&\n\t\textensions.isAllEnabled\n\t) {\n\t\treturn false;\n\t}\n\n\tlet shouldPromptReloadModal = false;\n\n\t// Only selected values from quick pick.\n\tfor (const value of selectedQuickPickValues) {\n\t\tconst ext = extensions.all.find((ext) => {\n\t\t\treturn ext.id === getExtensionIdFromText(value.description);\n\t\t});\n\t\tif (!ext) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Extension is already enabled.\n\t\tif (ext.isSnippetsEnabled) {\n\t\t\tenabledExtensions.push(ext);\n\t\t\tcontinue;\n\t\t}\n\n\t\tawait enableSnippetForExtension(ext);\n\t\tenabledExtensions.push(ext);\n\t\tshouldPromptReloadModal = true;\n\t}\n\n\t// Disable extensions by checking difference between enabled extensions.\n\tfor (const ext of extensions.enabled) {\n\t\tconst isEnabledExtensionFromQuickPick = enabledExtensions.find((val) => {\n\t\t\treturn val.id === ext.id;\n\t\t});\n\t\tif (isEnabledExtensionFromQuickPick) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tawait disableSnippetForExtension(ext);\n\t\tshouldPromptReloadModal = true;\n\t}\n\n\treturn shouldPromptReloadModal;\n}\n\nfunction reloadWindow() {\n\tvscode.commands.executeCommand(\"workbench.action.reloadWindow\");\n}\n\nfunction showReloadModal() {\n\treturn vscode.window.showInformationMessage(\n\t\t\"To disable or enable snippets from extensions reload is required.\",\n\t\t{ modal: true },\n\t\t...([\n\t\t\t{ title: \"Cancel\", isCloseAffordance: true },\n\t\t\t{ title: MODAL_RELOAD },\n\t\t] as vscode.MessageItem[])\n\t);\n}\n\nfunction showReloadWarning() {\n\treturn vscode.window.showWarningMessage(\n\t\t\"Reload or restart of VS Code is required after disable or enable snippets from extensions to take effect.\",\n\t\t{ modal: false },\n\t\t{ title: MODAL_RELOAD } as vscode.MessageItem\n\t);\n}\n","import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as vscode from \"vscode\";\n\ninterface Snippet {\n\tlanguage: string;\n\tpath: string;\n}\n\nexport interface ExtensionData {\n\tid: string;\n\tname: string;\n\tdescription: string;\n\tpath: string;\n\tpackageJSON: {\n\t\tname: string;\n\t\tpublisher: string;\n\t\tdisplayName?: string;\n\t\tcontributes: {\n\t\t\tsnippets?: Snippet[];\n\t\t\tsnippets_disabled?: Snippet[];\n\t\t};\n\t};\n\tisSnippetsEnabled?: boolean;\n}\n\nexport function getExtensionIdFromText(text?: string): string | undefined {\n\tif (text?.includes(\"built-in\")) {\n\t\treturn text.slice(0, text.indexOf(\"(built-in)\") - 1);\n\t}\n\n\tif (text?.includes(\"installed\")) {\n\t\treturn text.slice(0, text.indexOf(\"(installed)\") - 1);\n\t}\n}\n\nexport async function getAllExtensionsFromVSCode(): Promise<{\n\tall: ExtensionData[];\n\tdisabled: ExtensionData[];\n\tenabled: ExtensionData[];\n\tisAllEnabled: boolean;\n\tisAllDisabled: boolean;\n}> {\n\tconst allExtensions: ExtensionData[] = [];\n\tconst disabledExtensions: ExtensionData[] = [];\n\tconst enabledExtensions: ExtensionData[] = [];\n\n\tfor (const ext of vscode.extensions.all) {\n\t\t// Read package.json instead of accessing it from extension because it caches results and we need it in real-time.\n\t\tconst fileContent = await fs.promises.readFile(\n\t\t\tpath.join(ext.extensionPath, \"package.json\"),\n\t\t\t\"utf-8\"\n\t\t);\n\t\tconst packageJSON = JSON.parse(fileContent);\n\n\t\tif (!packageJSON.contributes) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst isBuiltin = packageJSON.publisher === \"vscode\";\n\t\tconst emoji = ext.extensionKind === vscode.ExtensionKind.UI ? \"🔋\" : \"🔌\";\n\t\tlet name = packageJSON.name;\n\t\tif (\n\t\t\t!isBuiltin &&\n\t\t\tpackageJSON.displayName &&\n\t\t\tpackageJSON.displayName !== \"%displayName%\"\n\t\t) {\n\t\t\tname = packageJSON.displayName;\n\t\t}\n\n\t\tconst extension: ExtensionData = {\n\t\t\tid: ext.id,\n\t\t\tpath: ext.extensionPath,\n\t\t\tdescription: `${ext.id} (${\n\t\t\t\tisBuiltin ? \"built-in\" : \"installed\"\n\t\t\t}) ${emoji}`,\n\t\t\tname,\n\t\t\tpackageJSON,\n\t\t};\n\n\t\tif (packageJSON.contributes.snippets) {\n\t\t\textension.isSnippetsEnabled = true;\n\t\t\tallExtensions.push(extension);\n\t\t\tenabledExtensions.push(extension);\n\t\t} else if (packageJSON.contributes.snippets_disabled) {\n\t\t\textension.isSnippetsEnabled = false;\n\t\t\tallExtensions.push(extension);\n\t\t\tdisabledExtensions.push(extension);\n\t\t}\n\t}\n\n\treturn {\n\t\tall: allExtensions,\n\t\tenabled: enabledExtensions,\n\t\tdisabled: disabledExtensions,\n\t\tisAllDisabled: disabledExtensions.length === allExtensions.length,\n\t\tisAllEnabled: enabledExtensions.length === allExtensions.length,\n\t};\n}\n","import * as vscode from \"vscode\";\nimport { ExtensionData } from \"./extension\";\n\nenum ExtensionStoreKey {\n\tVSCODE_VERSION = \"vscode_version\",\n\tDISABLED_EXTENSIONS = \"disabled_extensions\",\n}\n\nexport class ExtensionStore {\n\treadonly disabledExtensions?: ExtensionData[];\n\tprivate readonly _globalState: vscode.ExtensionContext[\"globalState\"];\n\tprivate _isNewVSCodeVersion?: boolean;\n\n\tconstructor(globalState: vscode.ExtensionContext[\"globalState\"]) {\n\t\tthis._globalState = globalState;\n\t\tthis.disabledExtensions = globalState.get<ExtensionData[]>(\n\t\t\tExtensionStoreKey.DISABLED_EXTENSIONS\n\t\t);\n\n\t\tconst vscodeVersionFromStorage = globalState.get<string>(\n\t\t\tExtensionStoreKey.VSCODE_VERSION\n\t\t);\n\t\tif (\n\t\t\tvscodeVersionFromStorage &&\n\t\t\tvscodeVersionFromStorage !== vscode.version\n\t\t) {\n\t\t\tthis._isNewVSCodeVersion = true;\n\t\t}\n\t}\n\n\tget shouldDisableExtensions(): boolean {\n\t\treturn (\n\t\t\tvscode.env.appName.includes(\"Insiders\") || !!this._isNewVSCodeVersion\n\t\t);\n\t}\n\n\tfindExtensionById(id: string): ExtensionData | undefined {\n\t\treturn this.disabledExtensions?.find((ext) => ext.id === id);\n\t}\n\n\tasync saveDisabledExtensions(extensions: ExtensionData[]): Promise<void> {\n\t\tconst disabledExtensionsId: Pick<\n\t\t\tExtensionData,\n\t\t\t\"id\"\n\t\t>[] = extensions.map((ext) => ({ id: ext.id }));\n\t\tawait this._globalState.update(\n\t\t\tExtensionStoreKey.DISABLED_EXTENSIONS,\n\t\t\tdisabledExtensionsId\n\t\t);\n\t}\n\n\tasync updateVSCodeVersion(): Promise<void> {\n\t\tawait this._globalState.update(\n\t\t\tExtensionStoreKey.VSCODE_VERSION,\n\t\t\tvscode.version\n\t\t);\n\t}\n}\n","import * as fs from \"fs\";\nimport * as path from \"path\";\nimport { ExtensionData } from \"./extension\";\n\nexport async function disableSnippetForExtension(\n\textension: ExtensionData\n): Promise<void> {\n\tconst { contributes } = extension.packageJSON;\n\n\tif (contributes.snippets_disabled) {\n\t\tthrow new Error(`${extension.name} is already disabled.`);\n\t}\n\n\tcontributes.snippets_disabled = contributes.snippets;\n\tcontributes.snippets = undefined;\n\tawait savePackageJSON(extension);\n}\n\nexport async function enableSnippetForExtension(\n\textension: ExtensionData\n): Promise<void> {\n\tconst { contributes } = extension.packageJSON;\n\n\tif (contributes.snippets) {\n\t\tthrow new Error(`${extension.name} is already enabled.`);\n\t}\n\n\tcontributes.snippets = contributes.snippets_disabled;\n\tcontributes.snippets_disabled = undefined;\n\tawait savePackageJSON(extension);\n}\n\nfunction savePackageJSON(extension: ExtensionData): Promise<void> {\n\treturn fs.promises.writeFile(\n\t\tpath.join(extension.path, \"package.json\"),\n\t\tJSON.stringify(extension.packageJSON)\n\t);\n}\n"],"sourceRoot":""}